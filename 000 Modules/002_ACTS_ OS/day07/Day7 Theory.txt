Topics to be covered
--------------------
1. Scripting Doubts
2. grep para(not just a line) on the basis of a pattern
3. System calls and their tracing
4. Running simple c programs via bash
5. Deadlock and it's avoidance

==
Arrays in Linux
---------------
[root@localhost ~]# linux_arr=(vipin imran )  -> declaring
[root@localhost ~]# linux_arr[0]=vipin --> initialising
[root@localhost ~]# echo ${linux_arr[*]}
vipin imran
[root@localhost ~]# echo ${linux_arr[1]}
imran
[root@localhost ~]# echo ${linux_arr[0]}
vipin

Usage of arrays in loops
------------------------
[root@localhost ~]# for i in "${linux_arr[@]}"; do echo "$i";done
vipin
imran
[root@localhost ~]# echo "${linux_arr[@]}"
vipin imran
[root@localhost ~]# for i in "${linux_arr[@]}"; do echo $i;done
vipin
imran
[root@localhost ~]# for i in "${linux_arr[*]}"; do echo $i;done
vipin imran
[root@localhost ~]# for i in "${linux_arr[*]}"; do echo "$i";done
vipin imran

Sticky Bits
-----------
A sticky bit is permission given to file/dir that lets only the owner of the file (or root) to delete/rename the file

root@ubuntu:~/edac# 
root@ubuntu:~/edac# su - vipin
vipin@ubuntu:~$ cd /root/edac/test/
vipin@ubuntu:/root/edac/test$ touch file1
vipin@ubuntu:/root/edac/test$ exit
logout
root@ubuntu:~/edac# su - harshit
harshit@ubuntu:~$ cd /root/edac/test/
harshit@ubuntu:/root/edac/test$ touch file2
harshit@ubuntu:/root/edac/test$ exit
logout
root@ubuntu:~/edac# cd test/
root@ubuntu:~/edac/test# ls -l
total 0
-rw-rw-r-- 1 vipin   vipin   0 May 12 19:47 file1
-rw-rw-r-- 1 harshit harshit 0 May 12 19:47 file2
root@ubuntu:~/edac/test# su - vipin
vipin@ubuntu:~$ cd /root/edac/test/
vipin@ubuntu:/root/edac/test$ rm -rf file2
vipin@ubuntu:/root/edac/test$ ls -l
total 0
-rw-rw-r-- 1 vipin vipin 0 May 12 19:47 file1
vipin@ubuntu:/root/edac/test$ exit
logout
root@ubuntu:~/edac/test# chmod -R +t /root/edac/test/
root@ubuntu:~/edac/test# su - harshit
harshit@ubuntu:~$ cd /root/edac/test/
harshit@ubuntu:/root/edac/test$ ls -l
total 0
-rw-rw-r-T 1 vipin vipin 0 May 12 19:47 file1
harshit@ubuntu:/root/edac/test$ rm -rf file1
rm: cannot remove 'file1': Operation not permitted

------------------------------------------------
How to trace system calls made by a process with strace on Linux

In order to inspect what a running application is doing under the hood, and what system calls it is performing during its execution, we can use the 'strace' utility

strace is a tool used to keep track of the system calls made by a running process and the signals received by it. System calls are the fundamental interface between an application and the Linux kernel; when we use strace, the name of the calls made by a process, along with their arguments and return values are displayed on stderr

Each line in the strace output contains:

The system call name
The arguments passed to the system call in parentheses
The system call return value

-------------------------

[root@centos7 edac]# echo "Hello World" > file_a
[root@centos7 edac]# touch file_b
[root@centos7 edac]# strace cp file_a file_b
execve("/usr/bin/cp", ["cp", "file_a", "file_b"], 0x7ffcb3021d70 /* 27 vars */) = 0
brk(NULL)                               = 0xbad000
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f5b4b050000
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=86240, ...}) = 0
mmap(NULL, 86240, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f5b4b03a000
close(3)                                = 0
open("/lib64/libselinux.so.1", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\220j\0\0\0\0\0\0"..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=155744, ...}) = 0
mmap(NULL, 2255216, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f5b4ac09000
mprotect(0x7f5b4ac2d000, 2093056, PROT_NONE) = 0
mmap(0x7f5b4ae2c000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x23000) = 0x7f5b4ae2c000
mmap(0x7f5b4ae2e000, 6512, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f5b4ae2e000
close(3)                                = 0
open("/lib64/libacl.so.1", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0p\37\0\0\0\0\0\0"..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=37064, ...}) = 0
mmap(NULL, 2130560, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f5b4aa00000
mprotect(0x7f5b4aa07000, 2097152, PROT_NONE) = 0
mmap(0x7f5b4ac07000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x7000) = 0x7f5b4ac07000
close(3)                                = 0
open("/lib64/libattr.so.1", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\320\23\0\0\0\0\0\0"..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=19896, ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f5b4b039000
mmap(NULL, 2113904, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f5b4a7fb000
mprotect(0x7f5b4a7ff000, 2093056, PROT_NONE) = 0
mmap(0x7f5b4a9fe000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x3000) = 0x7f5b4a9fe000
close(3)                                = 0
open("/lib64/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0`&\2\0\0\0\0\0"..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=2156240, ...}) = 0
mmap(NULL, 3985920, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f5b4a42d000
mprotect(0x7f5b4a5f0000, 2097152, PROT_NONE) = 0
mmap(0x7f5b4a7f0000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1c3000) = 0x7f5b4a7f0000
mmap(0x7f5b4a7f6000, 16896, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f5b4a7f6000
close(3)                                = 0
open("/lib64/libpcre.so.1", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\360\25\0\0\0\0\0\0"..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=402384, ...}) = 0
mmap(NULL, 2494984, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f5b4a1cb000
mprotect(0x7f5b4a22b000, 2097152, PROT_NONE) = 0
mmap(0x7f5b4a42b000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x60000) = 0x7f5b4a42b000
close(3)                                = 0
open("/lib64/libdl.so.2", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0P\16\0\0\0\0\0\0"..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=19248, ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f5b4b038000
mmap(NULL, 2109744, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f5b49fc7000
mprotect(0x7f5b49fc9000, 2097152, PROT_NONE) = 0
mmap(0x7f5b4a1c9000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x2000) = 0x7f5b4a1c9000
close(3)                                = 0
open("/lib64/libpthread.so.0", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\200m\0\0\0\0\0\0"..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=142144, ...}) = 0
mmap(NULL, 2208904, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f5b49dab000
mprotect(0x7f5b49dc2000, 2093056, PROT_NONE) = 0
mmap(0x7f5b49fc1000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x16000) = 0x7f5b49fc1000
mmap(0x7f5b49fc3000, 13448, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f5b49fc3000
close(3)                                = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f5b4b037000
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f5b4b035000
arch_prctl(ARCH_SET_FS, 0x7f5b4b035840) = 0
mprotect(0x7f5b4a7f0000, 16384, PROT_READ) = 0
mprotect(0x7f5b49fc1000, 4096, PROT_READ) = 0
mprotect(0x7f5b4a1c9000, 4096, PROT_READ) = 0
mprotect(0x7f5b4a42b000, 4096, PROT_READ) = 0
mprotect(0x7f5b4a9fe000, 4096, PROT_READ) = 0
mprotect(0x7f5b4ac07000, 4096, PROT_READ) = 0
mprotect(0x7f5b4ae2c000, 4096, PROT_READ) = 0
mprotect(0x623000, 4096, PROT_READ)     = 0
mprotect(0x7f5b4b051000, 4096, PROT_READ) = 0
munmap(0x7f5b4b03a000, 86240)           = 0
set_tid_address(0x7f5b4b035b10)         = 6618
set_robust_list(0x7f5b4b035b20, 24)     = 0
rt_sigaction(SIGRTMIN, {sa_handler=0x7f5b49db1860, sa_mask=[], sa_flags=SA_RESTORER|SA_SIGINFO, sa_restorer=0x7f5b49dba630}, NULL, 8) = 0
rt_sigaction(SIGRT_1, {sa_handler=0x7f5b49db18f0, sa_mask=[], sa_flags=SA_RESTORER|SA_RESTART|SA_SIGINFO, sa_restorer=0x7f5b49dba630}, NULL, 8) = 0
rt_sigprocmask(SIG_UNBLOCK, [RTMIN RT_1], NULL, 8) = 0
getrlimit(RLIMIT_STACK, {rlim_cur=8192*1024, rlim_max=RLIM64_INFINITY}) = 0
statfs("/sys/fs/selinux", {f_type=SELINUX_MAGIC, f_bsize=4096, f_blocks=0, f_bfree=0, f_bavail=0, f_files=0, f_ffree=0, f_fsid={val=[0, 0]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RELATIME}) = 0
statfs("/sys/fs/selinux", {f_type=SELINUX_MAGIC, f_bsize=4096, f_blocks=0, f_bfree=0, f_bavail=0, f_files=0, f_ffree=0, f_fsid={val=[0, 0]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RELATIME}) = 0
stat("/sys/fs/selinux", {st_mode=S_IFDIR|0755, st_size=0, ...}) = 0
brk(NULL)                               = 0xbad000
brk(0xbce000)                           = 0xbce000
access("/etc/selinux/config", F_OK)     = 0
open("/usr/lib/locale/locale-archive", O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=106172832, ...}) = 0
mmap(NULL, 106172832, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f5b43869000
close(3)                                = 0
geteuid()                               = 0
stat("file_b", {st_mode=S_IFREG|0644, st_size=0, ...}) = 0
stat("file_a", {st_mode=S_IFREG|0644, st_size=12, ...}) = 0
stat("file_b", {st_mode=S_IFREG|0644, st_size=0, ...}) = 0
open("file_a", O_RDONLY)                = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=12, ...}) = 0
open("file_b", O_WRONLY|O_TRUNC)        = 4
fstat(4, {st_mode=S_IFREG|0644, st_size=0, ...}) = 0
fadvise64(3, 0, 0, POSIX_FADV_SEQUENTIAL) = 0
read(3, "Hello World\n", 65536)         = 12
write(4, "Hello World\n", 12)           = 12
read(3, "", 65536)                      = 0
close(4)                                = 0
close(3)                                = 0
lseek(0, 0, SEEK_CUR)                   = -1 ESPIPE (Illegal seek)
close(0)                                = 0
close(1)                                = 0
close(2)                                = 0
exit_group(0)                           = ?
+++ exited with 0 +++

-------------------------
The first system call we can see in the output is execve. 
This call is used to execute a program with a specified array of arguments. The first argument accepted by execv is the path of the file we want to execute; the second is an array of strings which represents the arguments that will be passed to the program

Let's understand this - execve("/usr/bin/cp", ["cp", "file_a", "file_b"], 0x7ffcb3021d70 /* 27 vars */) = 0

Here: the binary that is called is /usr/bin/cp, and the array of arguments passed to the call are: the name of the program (cp), the source and the destination paths
The /* 27 vars */ notation means that 27 variables where inherited from the calling process
Return value = 0

Filtering only specific system calls
====================================

Use -e option followed by an expression which indicates what system calls should be traced

Usage:

To just check for execve calls

[root@centos7 edac]# strace -e execve cp file_a file_b
execve("/usr/bin/cp", ["cp", "file_a", "file_b"], 0x7ffce150e8c0 /* 27 vars */) = 0
+++ exited with 0 +++

To just check for read calls

[root@centos7 edac]# strace -e read cp file_a file_b
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\220j\0\0\0\0\0\0"..., 832) = 832
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0p\37\0\0\0\0\0\0"..., 832) = 832
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\320\23\0\0\0\0\0\0"..., 832) = 832
read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0`&\2\0\0\0\0\0"..., 832) = 832
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\360\25\0\0\0\0\0\0"..., 832) = 832
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0P\16\0\0\0\0\0\0"..., 832) = 832
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\200m\0\0\0\0\0\0"..., 832) = 832
read(3, "Hello World\n", 65536)         = 12
read(3, "", 65536)                      = 0
+++ exited with 0 +++

Note: read system call takes three arguments: the first is a file descriptor associated with the file that should be read; the second is the buffer into which the file should be read, and third is the number of bytes that should be read


Trace an existing and already running process
=============================================
strace -p <pid of the process>  --> this is called attaching of strace to a process

Tracing signals
===============
We can trace the signals passed to the process if we attach strace to a process
<Demo of initiating top, attaching strace to top and killing top - each in a new shell>

Summary of the system calls
===========================

Use 'strace -c'

+++++++++++++++
Theory Concepts
+++++++++++++++

Scheduling Algorithm examples
=============================
Non-preemptive examples:
1. FCFS : First come First Serve
2. SJF : Shortest Job First
3. Priority Scheduling : Scheduled based on priority

Preemptive examples:
1. Round Robin
2. Shortest Remaining Time First

FIFO - First come first served
1. FIFO is non pre-emptive
2. The context switch happens only on process termination
3. No Starvation observed

Shortest Job First
1. Non preemptive algorithm
2. Total execution time must be known before execution
3. Starvation can be observed

Priority Scheduling
1. Dynamic priority Scheduling algorithm
2. Used in Real time O.S
3. Queue will be searched for the process closest to its deadline.

Round Robin
1. Preemptive algorithm
2. Employs Time-sharing algorithm
3. Gives each job its time-slice a.k.a quantum.

Shortest Remaining Time First
1. Preemptive algorithm
2. Preemptive version of Shortest Job First Algorithm
3. The process with least remaining time is executed first.

Thread
======
A thread of execution is often regarded as the smallest unit of processing that a scheduler works on.
A thread is also called a lightweight process
Threads enable true parallelism on multiple processor machines

Threads are created like normal tasks, with the exception that the clone() system call is passed flags corresponding to specific resources to be shared:

clone(CLONE_VM | CLONE_FS | CLONE_FILES | CLONE_SIGHAND, 0);

Meaning of above Flags with clone()

CLONE_VM	Parent and child share address space.
CLONE_FS	Parent and child share filesystem information.
CLONE_FILES	Parent and child share open files.
CLONE_SIGHAND	Parent and child share signal handlers and blocked signals.

Note: Linux has support for hundreds to thousands of threads.

Process vs Thread
=================
Process is heavy weight or resource intensive.	
Thread is light weight, taking lesser resources than a process.

Process switching needs interaction with operating system.	
Thread switching does not need to interact with operating system.

In multiple processing environments, each process executes the same code but has its own memory and file resources.	
All threads can share same set of open files, child processes.

If one process is blocked, then no other process can execute until the first process is unblocked.	
While one thread is blocked and waiting, a second thread in the same task can run.

Multiple processes without using threads use more resources.	
Multiple threaded processes use fewer resources.

In multiple processes each process operates independently of the others.
One thread can read, write or change another thread's data.

Advantages of Thread
====================
Threads minimize the context switching time.
Efficient communication.
It is more economical to create and context switch threads.
Threads allow utilization of multiprocessor architectures

How Linux OS treats threads
===========================
Linux has a unique implementation of threads.  To the Linux kernel, there is no concept of a thread. 
Linux implements all threads as standard processes. 
The Linux kernel does not provide any special scheduling semantics or data structures to represent threads. Instead, a thread is merely a process that shares certain resources with other processes.
Each thread has a unique task_struct and appears to the kernel as a normal process 

Kernel Level Threads
====================
Kernel threads are processes that exist only in kernel space. Kernel threads can only be created by other kernel threads.

LifeCycle
---------

You can create a kernel thread with the kthread_create() function. The thread will be created in an no-running state.
You can create and start a kernel thread with kthread_run(). 
Once started a kernel thread continues to exist until either it calls do_exit() or another thread calls kthread_stop()

Show threads per process
====================
We can count threads with the list of available sub directories inside /proc/<PID>/task/
For example to check some thread count --> ls /proc/$(pidof process)/task/

Running c program via Shell
=================================
You would need the compiler - gcc

gcc --version

yum -y install gcc (Centos)
apt-get install gcc (Ubuntu)

==================================
nano hello.c

#include <stdio.h>

int main()
{
  printf("hello world\n");
  return 0;
}

Compile
gcc hello.c -o hello

To execute program:
./hello
===================================
Task
----
Write a script that checks for the number of users with userID greater than '1000' (using awk) in the Linux system and continuosuly monitors for security reasons and displays as soon as the count increases or decreases i.e if user is added/deleted.

DeadLock
--------
A process in operating systems uses different resources and uses resources in the following way. 
Requests a resource 
Use the resource 
Releases the resource 

Deadlock is a situation where a set of processes are blocked because each process is holding a resource and waiting for another resource acquired by some other process. 

----------------------------------------------------------------------
Deadlock can arise if the following four conditions hold simultaneously

Mutual Exclusion: One or more than one resource are non-shareable (Only one process can use at a time).
Hold and Wait: A process is holding at least one resource and waiting for resources. 
No Preemption: A resource cannot be taken from a process unless the process releases the resource. 
Circular Wait: A set of processes are waiting for each other in circular form. 
----------------------------------------------------------------------

Deadlock Prevention

Deadlock prevention means to block at least one of the four conditions required for deadlock to occur. If we are able to block any one of them then deadlock can be prevented

----------------------------------------------------------------------
Deadlock Avoidance 

In Deadlock avoidance we have to anticipate deadlock before it really occurs and ensure that the system does not go in unsafe state.It is possible to avoid deadlock if resources are allocated carefully.

----------------------------------------------------------------------
Few Differences between Deadlock Prevention and Avoidance
Concept	
Deadlock Prevention - It blocks at least one of the conditions necessary for deadlock to occur.	
Deadlock Avoidance - It ensures that system does not go in unsafe state

Resource Request	
Deadlock Prevention - All the resources are requested together.	
Deadlock Avoidance - Resource requests are done according to the available safe path.

Information required	
Deadlock Prevention -It does not requires information about existing resources, available resources and resource requests	
Deadlock Avoidance - It requires information about existing resources, available resources and resource requests

Procedure	
Deadlock Prevention -It prevents deadlock by constraining resource request process and handling of resources.	
Deadlock Avoidance - It automatically considers requests and check whether it is safe for system or not.

Preemption	
Deadlock Prevention -Sometimes, preemption occurs more frequently.	
Deadlock Avoidance - In deadlock avoidance there is no preemption.
----------------------------------------------------------------------

Zombie state : When a process is created in UNIX using fork() system call, the address space of the Parent process is replicated. If the parent process calls wait() system call, then the execution of parent is suspended until the child is terminated.

 At the termination of the child, a ‘SIGCHLD’ signal is generated which is delivered to the parent by the kernel. 
 Parent, on receipt of ‘SIGCHLD’ stops the child process
 
 Even though, the child is terminated, there is an entry in the process table corresponding to the child where the status is stored
 
 When parent collects the status, this entry is deleted
 But, if the parent decides not to wait for the child’s termination and it executes its subsequent task, then at the termination of the child, the exit status is not read.
 
 Hence, there remains an entry in the process table even after the termination of the child. This state of the child process is known as the Zombie state.

Now Run two Programs

First
-----
#include<stdio.h> 
#include<unistd.h> 
#include<sys/wait.h> 
#include<sys/types.h> 

int main() 
{ 
	int i; 
	int pid = fork(); 

	if (pid == 0) 
	{ 
		for (i=0; i<20; i++) 
			printf("I am Child\n"); 
	} 
	else
	{ 
		printf("I am Parent\n"); 
		while(1); 
	} 
} 

Second
------
#include<stdio.h> 
#include<unistd.h> 
#include<sys/wait.h> 
#include<sys/types.h> 

int main() 
{ 
	int i; 
	int pid = fork(); 
	if (pid==0) 
	{ 
		for (i=0; i<20; i++) 
			printf("I am Child\n"); 
	} 
	else
	{ 
		wait(NULL); 
		printf("I am Parent\n"); 
		while(1); 
	} 
} 

(Here zombie is stopped due to wait)


Bankers algorithm
-----------------
Banker’s Algorithm is a deadlock avoidance algorithm. It is also used for deadlock detection. This algorithm tells that if any system can go into a deadlock or not by analyzing the currently allocated resources and the resources required by it in the future.

Bank example
--
Total amount -> Rs 1000
Account holders -> Rs 900
You go there for asking loan --> Rs 100









